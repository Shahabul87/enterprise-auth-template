// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_auth_template/test/security/security_manager_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:flutter_auth_template/core/network/api_response.dart' as _i3;
import 'package:flutter_auth_template/core/security/anti_tampering_service.dart'
    as _i4;
import 'package:flutter_auth_template/core/security/app_attestation_service.dart'
    as _i2;
import 'package:flutter_auth_template/core/security/rasp_service.dart' as _i7;
import 'package:flutter_auth_template/core/security/security_event_logger.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAttestationResult_0 extends _i1.SmartFake
    implements _i2.AttestationResult {
  _FakeAttestationResult_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAttestationRequirements_1 extends _i1.SmartFake
    implements _i2.AttestationRequirements {
  _FakeAttestationRequirements_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeApiResponse_2<T> extends _i1.SmartFake
    implements _i3.ApiResponse<T> {
  _FakeApiResponse_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTamperDetectionResult_3 extends _i1.SmartFake
    implements _i4.TamperDetectionResult {
  _FakeTamperDetectionResult_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSecurityEventStatistics_4 extends _i1.SmartFake
    implements _i5.SecurityEventStatistics {
  _FakeSecurityEventStatistics_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AppAttestationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppAttestationService extends _i1.Mock
    implements _i2.AppAttestationService {
  MockAppAttestationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<_i2.AttestationResult> verifyAttestation({
    required String? userId,
    String? challenge,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#verifyAttestation, [], {
              #userId: userId,
              #challenge: challenge,
            }),
            returnValue: _i6.Future<_i2.AttestationResult>.value(
              _FakeAttestationResult_0(
                this,
                Invocation.method(#verifyAttestation, [], {
                  #userId: userId,
                  #challenge: challenge,
                }),
              ),
            ),
          )
          as _i6.Future<_i2.AttestationResult>);

  @override
  _i6.Future<bool> isAttestationSupported() =>
      (super.noSuchMethod(
            Invocation.method(#isAttestationSupported, []),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i2.AttestationRequirements getRequirements() =>
      (super.noSuchMethod(
            Invocation.method(#getRequirements, []),
            returnValue: _FakeAttestationRequirements_1(
              this,
              Invocation.method(#getRequirements, []),
            ),
          )
          as _i2.AttestationRequirements);

  @override
  _i6.Future<_i3.ApiResponse<bool>> validateOnServer({
    required _i2.AttestationResult? result,
    required String? userId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#validateOnServer, [], {
              #result: result,
              #userId: userId,
            }),
            returnValue: _i6.Future<_i3.ApiResponse<bool>>.value(
              _FakeApiResponse_2<bool>(
                this,
                Invocation.method(#validateOnServer, [], {
                  #result: result,
                  #userId: userId,
                }),
              ),
            ),
          )
          as _i6.Future<_i3.ApiResponse<bool>>);
}

/// A class which mocks [AntiTamperingService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAntiTamperingService extends _i1.Mock
    implements _i4.AntiTamperingService {
  MockAntiTamperingService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<_i4.TamperDetectionResult> verifyIntegrity() =>
      (super.noSuchMethod(
            Invocation.method(#verifyIntegrity, []),
            returnValue: _i6.Future<_i4.TamperDetectionResult>.value(
              _FakeTamperDetectionResult_3(
                this,
                Invocation.method(#verifyIntegrity, []),
              ),
            ),
          )
          as _i6.Future<_i4.TamperDetectionResult>);

  @override
  _i6.Future<bool> isRunningInEmulator() =>
      (super.noSuchMethod(
            Invocation.method(#isRunningInEmulator, []),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<String?> getInstallerSource() =>
      (super.noSuchMethod(
            Invocation.method(#getInstallerSource, []),
            returnValue: _i6.Future<String?>.value(),
          )
          as _i6.Future<String?>);

  @override
  _i6.Future<bool> isFromOfficialStore() =>
      (super.noSuchMethod(
            Invocation.method(#isFromOfficialStore, []),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);
}

/// A class which mocks [RASPService].
///
/// See the documentation for Mockito's code generation for more information.
class MockRASPService extends _i1.Mock implements _i7.RASPService {
  MockRASPService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Stream<_i7.SecurityViolation> get violationStream =>
      (super.noSuchMethod(
            Invocation.getter(#violationStream),
            returnValue: _i6.Stream<_i7.SecurityViolation>.empty(),
          )
          as _i6.Stream<_i7.SecurityViolation>);

  @override
  List<_i7.SecurityViolation> get violations =>
      (super.noSuchMethod(
            Invocation.getter(#violations),
            returnValue: <_i7.SecurityViolation>[],
          )
          as List<_i7.SecurityViolation>);

  @override
  set onViolationDetected(
    dynamic Function(_i7.SecurityViolation)? _onViolationDetected,
  ) => super.noSuchMethod(
    Invocation.setter(#onViolationDetected, _onViolationDetected),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<void> initialize({
    bool? enableDebuggerDetection = true,
    bool? enableHookDetection = true,
    bool? enableMemoryProtection = true,
    bool? enableAntiDebugging = true,
    dynamic Function(_i7.SecurityViolation)? onViolation,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#initialize, [], {
              #enableDebuggerDetection: enableDebuggerDetection,
              #enableHookDetection: enableHookDetection,
              #enableMemoryProtection: enableMemoryProtection,
              #enableAntiDebugging: enableAntiDebugging,
              #onViolation: onViolation,
            }),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void clearViolations() => super.noSuchMethod(
    Invocation.method(#clearViolations, []),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [SecurityEventLogger].
///
/// See the documentation for Mockito's code generation for more information.
class MockSecurityEventLogger extends _i1.Mock
    implements _i5.SecurityEventLogger {
  MockSecurityEventLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Stream<_i5.SecurityEvent> get eventStream =>
      (super.noSuchMethod(
            Invocation.getter(#eventStream),
            returnValue: _i6.Stream<_i5.SecurityEvent>.empty(),
          )
          as _i6.Stream<_i5.SecurityEvent>);

  @override
  _i6.Future<void> logEvent({
    required _i5.SecurityEventType? type,
    required _i5.SecurityEventSeverity? severity,
    String? userId,
    String? description,
    Map<String, dynamic>? metadata,
    String? ipAddress,
    String? userAgent,
    String? deviceId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#logEvent, [], {
              #type: type,
              #severity: severity,
              #userId: userId,
              #description: description,
              #metadata: metadata,
              #ipAddress: ipAddress,
              #userAgent: userAgent,
              #deviceId: deviceId,
            }),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> logLoginSuccess({
    required String? userId,
    String? ipAddress,
    String? deviceId,
    Map<String, dynamic>? metadata,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#logLoginSuccess, [], {
              #userId: userId,
              #ipAddress: ipAddress,
              #deviceId: deviceId,
              #metadata: metadata,
            }),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> logLoginFailure({
    String? userId,
    String? email,
    String? reason,
    String? ipAddress,
    String? deviceId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#logLoginFailure, [], {
              #userId: userId,
              #email: email,
              #reason: reason,
              #ipAddress: ipAddress,
              #deviceId: deviceId,
            }),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> logAccountLockout({
    required String? userId,
    required int? failedAttempts,
    String? ipAddress,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#logAccountLockout, [], {
              #userId: userId,
              #failedAttempts: failedAttempts,
              #ipAddress: ipAddress,
            }),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> logRateLimitExceeded({
    String? userId,
    required String? endpoint,
    String? ipAddress,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#logRateLimitExceeded, [], {
              #userId: userId,
              #endpoint: endpoint,
              #ipAddress: ipAddress,
            }),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> logSuspiciousActivity({
    String? userId,
    required String? activity,
    required String? reason,
    String? ipAddress,
    Map<String, dynamic>? metadata,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#logSuspiciousActivity, [], {
              #userId: userId,
              #activity: activity,
              #reason: reason,
              #ipAddress: ipAddress,
              #metadata: metadata,
            }),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  List<_i5.SecurityEvent> getEvents({
    _i5.SecurityEventType? type,
    _i5.SecurityEventSeverity? severity,
    String? userId,
    DateTime? startDate,
    DateTime? endDate,
    int? limit,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getEvents, [], {
              #type: type,
              #severity: severity,
              #userId: userId,
              #startDate: startDate,
              #endDate: endDate,
              #limit: limit,
            }),
            returnValue: <_i5.SecurityEvent>[],
          )
          as List<_i5.SecurityEvent>);

  @override
  _i5.SecurityEventStatistics getStatistics({
    DateTime? startDate,
    DateTime? endDate,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getStatistics, [], {
              #startDate: startDate,
              #endDate: endDate,
            }),
            returnValue: _FakeSecurityEventStatistics_4(
              this,
              Invocation.method(#getStatistics, [], {
                #startDate: startDate,
                #endDate: endDate,
              }),
            ),
          )
          as _i5.SecurityEventStatistics);

  @override
  _i6.Future<void> clearOldEvents({int? daysToKeep = 30}) =>
      (super.noSuchMethod(
            Invocation.method(#clearOldEvents, [], {#daysToKeep: daysToKeep}),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
