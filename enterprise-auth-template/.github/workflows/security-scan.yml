name: Security Scanning

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - code
          - dependencies
          - containers
          - secrets

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  DOCKER_BUILDKIT: 1

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # ==============================================================================
  # CodeQL Analysis - Static code analysis for security vulnerabilities
  # ==============================================================================
  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'code' || github.event.inputs.scan_type == ''
    
    strategy:
      fail-fast: false
      matrix:
        language: ['javascript', 'python']
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          config-file: ./.github/codeql/codeql-config.yml
          queries: +security-and-quality

      - name: Set up Node.js (for JavaScript analysis)
        if: matrix.language == 'javascript'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Set up Python (for Python analysis)
        if: matrix.language == 'python'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies (JavaScript)
        if: matrix.language == 'javascript'
        working-directory: ./frontend
        run: npm ci

      - name: Install dependencies (Python)
        if: matrix.language == 'python'
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"
          upload: true

  # ==============================================================================
  # Trivy - Vulnerability scanner for containers and filesystems
  # ==============================================================================
  trivy-security-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'containers' || github.event.inputs.scan_type == ''
    
    strategy:
      matrix:
        scan-type: ['fs', 'config']
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner (${{ matrix.scan-type }})
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: ${{ matrix.scan-type }}
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-${{ matrix.scan-type }}-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '1'
          ignore-unfixed: true
          skip-dirs: 'node_modules,__pycache__,.git'

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-${{ matrix.scan-type }}-results.sarif'

      - name: Upload Trivy results as artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-${{ matrix.scan-type }}-results
          path: 'trivy-${{ matrix.scan-type }}-results.sarif'

  # ==============================================================================
  # Container Security Scanning - Scan built Docker images
  # ==============================================================================
  container-security-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: []
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'containers' || github.event.inputs.scan_type == ''
    
    strategy:
      matrix:
        component: ['backend', 'frontend']
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for scanning
        run: |
          docker build -t security-scan-${{ matrix.component }}:latest ./${{ matrix.component }} \
            --target production \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --build-arg VCS_REF=$GITHUB_SHA \
            --build-arg VERSION=$GITHUB_REF_NAME

      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'security-scan-${{ matrix.component }}:latest'
          format: 'sarif'
          output: 'trivy-container-${{ matrix.component }}.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '1'

      - name: Upload container scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-container-${{ matrix.component }}.sarif'

      - name: Run Dockle security linter
        run: |
          # Install Dockle
          VERSION=$(curl --silent "https://api.github.com/repos/goodwithtech/dockle/releases/latest" | \
            grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
          curl -L -o dockle.tar.gz "https://github.com/goodwithtech/dockle/releases/download/v${VERSION}/dockle_${VERSION}_Linux-64bit.tar.gz"
          tar zxf dockle.tar.gz
          sudo mv dockle /usr/local/bin/
          
          # Run Dockle scan
          dockle --exit-code 1 --exit-level WARN --format sarif --output dockle-${{ matrix.component }}.sarif security-scan-${{ matrix.component }}:latest

      - name: Upload Dockle results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dockle-${{ matrix.component }}-results
          path: 'dockle-${{ matrix.component }}.sarif'

  # ==============================================================================
  # Dependency Security Scanning
  # ==============================================================================
  dependency-security-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'dependencies' || github.event.inputs.scan_type == ''
    
    strategy:
      matrix:
        component: ['backend', 'frontend']
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js (Frontend)
        if: matrix.component == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Set up Python (Backend)
        if: matrix.component == 'backend'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies (Frontend)
        if: matrix.component == 'frontend'
        working-directory: ./frontend
        run: npm ci

      - name: Install dependencies (Backend)
        if: matrix.component == 'backend'
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run npm audit (Frontend)
        if: matrix.component == 'frontend'
        working-directory: ./frontend
        run: |
          npm audit --audit-level=high --json > npm-audit-report.json || true
        continue-on-error: true

      - name: Run Safety check (Backend)
        if: matrix.component == 'backend'
        working-directory: ./backend
        run: |
          pip install safety
          safety check --json --output safety-report.json || true
        continue-on-error: true

      - name: Run pip-audit (Backend)
        if: matrix.component == 'backend'
        working-directory: ./backend
        run: |
          pip install pip-audit
          pip-audit --format=json --output=pip-audit-report.json || true
        continue-on-error: true

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        if: matrix.component == 'frontend'
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json --json-file-output=snyk-report.json
        continue-on-error: true

      - name: Run Snyk Python scan
        uses: snyk/actions/python@master
        if: matrix.component == 'backend'
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json --json-file-output=snyk-python-report.json
        continue-on-error: true

      - name: Upload dependency scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-scan-${{ matrix.component }}
          path: |
            **/*audit-report.json
            **/*safety-report.json
            **/*snyk*-report.json

  # ==============================================================================
  # OWASP Dependency Check
  # ==============================================================================
  owasp-dependency-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'dependencies' || github.event.inputs.scan_type == ''
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        id: depcheck
        with:
          project: 'enterprise-auth-template'
          path: '.'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
            --nvdApiKey ${{ secrets.NVD_API_KEY }}
            --failOnCVSS 7
            --exclude "**/node_modules/**"
            --exclude "**/__pycache__/**"
            --exclude "**/venv/**"
            --exclude "**/.git/**"

      - name: Upload OWASP results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: reports/dependency-check-report.sarif

      - name: Upload OWASP Dependency Check results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: owasp-dependency-check-report
          path: reports/

  # ==============================================================================
  # Secret Scanning - Detect exposed secrets and credentials
  # ==============================================================================
  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'secrets' || github.event.inputs.scan_type == ''
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog secret scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks secret scan
        run: |
          # Install GitLeaks
          wget -O gitleaks.tar.gz https://github.com/zricethezav/gitleaks/releases/download/v8.18.0/gitleaks_8.18.0_linux_x64.tar.gz
          tar -xzf gitleaks.tar.gz
          sudo mv gitleaks /usr/local/bin/
          
          # Run GitLeaks scan
          gitleaks detect --source . --verbose --report-path gitleaks-report.json --report-format json --exit-code 1

      - name: Upload secret scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: secret-scan-results
          path: |
            gitleaks-report.json

  # ==============================================================================
  # License Compliance Scanning
  # ==============================================================================
  license-scan:
    name: License Compliance Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == ''
    
    strategy:
      matrix:
        component: ['backend', 'frontend']
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js (Frontend)
        if: matrix.component == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Set up Python (Backend)
        if: matrix.component == 'backend'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies (Frontend)
        if: matrix.component == 'frontend'
        working-directory: ./frontend
        run: npm ci

      - name: Install dependencies (Backend)
        if: matrix.component == 'backend'
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run license check (Frontend)
        if: matrix.component == 'frontend'
        working-directory: ./frontend
        run: |
          npm install -g license-checker
          license-checker --json --out license-report-frontend.json
          license-checker --summary --out license-summary-frontend.txt

      - name: Run license check (Backend)
        if: matrix.component == 'backend'
        working-directory: ./backend
        run: |
          pip install pip-licenses
          pip-licenses --format=json --output-file=license-report-backend.json
          pip-licenses --format=plain --output-file=license-summary-backend.txt

      - name: Upload license scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: license-scan-${{ matrix.component }}
          path: |
            **/*license-report*.json
            **/*license-summary*.txt

  # ==============================================================================
  # Security Report Consolidation
  # ==============================================================================
  security-report:
    name: Consolidate Security Reports
    runs-on: ubuntu-latest
    needs: [codeql-analysis, trivy-security-scan, container-security-scan, dependency-security-scan, owasp-dependency-check, secret-scanning, license-scan]
    if: always()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate security summary
        run: |
          echo "# Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "**Scan Date:** $(date -u)" >> security-summary.md
          echo "**Commit:** $GITHUB_SHA" >> security-summary.md
          echo "**Branch:** $GITHUB_REF_NAME" >> security-summary.md
          echo "" >> security-summary.md
          
          # Add scan results summary
          echo "## Scan Results" >> security-summary.md
          echo "" >> security-summary.md
          
          # List all SARIF files found
          echo "### SARIF Results Found:" >> security-summary.md
          find . -name "*.sarif" -type f | while read sarif_file; do
            echo "- $sarif_file" >> security-summary.md
          done
          echo "" >> security-summary.md
          
          # List all JSON reports found
          echo "### JSON Reports Found:" >> security-summary.md
          find . -name "*report*.json" -type f | while read json_file; do
            echo "- $json_file" >> security-summary.md
          done

      - name: Upload consolidated security report
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-summary
          path: |
            security-summary.md
            **/*.sarif
            **/*report*.json

      - name: Comment PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  # ==============================================================================
  # Security Notification
  # ==============================================================================
  security-notification:
    name: Security Notifications
    runs-on: ubuntu-latest
    needs: [security-report]
    if: failure() && (github.event_name == 'schedule' || github.ref == 'refs/heads/main')
    
    steps:
      - name: Send Slack notification on security issues
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            🚨 Security scan failed for ${{ github.repository }}
            
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Triggered by: ${{ github.event_name }}
            
            Please check the security scan results and address any critical vulnerabilities.
          webhook_url: ${{ secrets.SLACK_SECURITY_WEBHOOK }}
        if: env.SLACK_SECURITY_WEBHOOK != ''

      - name: Send email notification on critical vulnerabilities
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_HOST }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: 'Security Alert: Critical vulnerabilities found in ${{ github.repository }}'
          body: |
            Critical security vulnerabilities have been detected in the security scan.
            
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            
            Please review the security scan results immediately and take appropriate action.
            
            View the full report: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: ${{ secrets.SECURITY_EMAIL }}
          from: ${{ secrets.SMTP_FROM }}
        if: env.SECURITY_EMAIL != '' && env.SMTP_HOST != ''