// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_auth_template/test/security/security_integration_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:ui' as _i15;

import 'package:flutter_auth_template/core/network/api_response.dart' as _i2;
import 'package:flutter_auth_template/core/security/account_lockout_service.dart'
    as _i3;
import 'package:flutter_auth_template/core/security/device_fingerprint_service.dart'
    as _i4;
import 'package:flutter_auth_template/core/security/rate_limiter.dart' as _i6;
import 'package:flutter_auth_template/core/security/remember_device_service.dart'
    as _i5;
import 'package:flutter_auth_template/core/security/session_timeout_manager.dart'
    as _i14;
import 'package:flutter_auth_template/core/storage/secure_storage_service.dart'
    as _i13;
import 'package:flutter_auth_template/data/models/auth_request.dart' as _i10;
import 'package:flutter_auth_template/data/models/auth_response.dart' as _i11;
import 'package:flutter_auth_template/domain/entities/user.dart' as _i9;
import 'package:flutter_auth_template/infrastructure/services/auth/auth_service.dart'
    as _i7;
import 'package:flutter_auth_template/infrastructure/services/auth/oauth_service.dart'
    as _i12;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeApiResponse_0<T> extends _i1.SmartFake
    implements _i2.ApiResponse<T> {
  _FakeApiResponse_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAccountLockoutStatus_1 extends _i1.SmartFake
    implements _i3.AccountLockoutStatus {
  _FakeAccountLockoutStatus_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDeviceFingerprint_2 extends _i1.SmartFake
    implements _i4.DeviceFingerprint {
  _FakeDeviceFingerprint_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDuration_3 extends _i1.SmartFake implements Duration {
  _FakeDuration_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRememberedDeviceStatus_4 extends _i1.SmartFake
    implements _i5.RememberedDeviceStatus {
  _FakeRememberedDeviceStatus_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRememberPreferences_5 extends _i1.SmartFake
    implements _i5.RememberPreferences {
  _FakeRememberPreferences_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRateLimitResult_6 extends _i1.SmartFake
    implements _i6.RateLimitResult {
  _FakeRateLimitResult_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRateLimitStatus_7 extends _i1.SmartFake
    implements _i6.RateLimitStatus {
  _FakeRateLimitStatus_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i7.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i2.ApiResponse<_i9.User>> login(_i10.LoginRequest? request) =>
      (super.noSuchMethod(
            Invocation.method(#login, [request]),
            returnValue: _i8.Future<_i2.ApiResponse<_i9.User>>.value(
              _FakeApiResponse_0<_i9.User>(
                this,
                Invocation.method(#login, [request]),
              ),
            ),
          )
          as _i8.Future<_i2.ApiResponse<_i9.User>>);

  @override
  _i8.Future<_i2.ApiResponse<_i9.User>> register(
    _i10.RegisterRequest? request,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#register, [request]),
            returnValue: _i8.Future<_i2.ApiResponse<_i9.User>>.value(
              _FakeApiResponse_0<_i9.User>(
                this,
                Invocation.method(#register, [request]),
              ),
            ),
          )
          as _i8.Future<_i2.ApiResponse<_i9.User>>);

  @override
  _i8.Future<_i2.ApiResponse<_i9.User>> getCurrentUser() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentUser, []),
            returnValue: _i8.Future<_i2.ApiResponse<_i9.User>>.value(
              _FakeApiResponse_0<_i9.User>(
                this,
                Invocation.method(#getCurrentUser, []),
              ),
            ),
          )
          as _i8.Future<_i2.ApiResponse<_i9.User>>);

  @override
  _i8.Future<_i2.ApiResponse<_i9.User>> updateProfile(
    Map<String, dynamic>? data,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateProfile, [data]),
            returnValue: _i8.Future<_i2.ApiResponse<_i9.User>>.value(
              _FakeApiResponse_0<_i9.User>(
                this,
                Invocation.method(#updateProfile, [data]),
              ),
            ),
          )
          as _i8.Future<_i2.ApiResponse<_i9.User>>);

  @override
  _i8.Future<_i2.ApiResponse<_i9.User>> refreshToken(String? refreshToken) =>
      (super.noSuchMethod(
            Invocation.method(#refreshToken, [refreshToken]),
            returnValue: _i8.Future<_i2.ApiResponse<_i9.User>>.value(
              _FakeApiResponse_0<_i9.User>(
                this,
                Invocation.method(#refreshToken, [refreshToken]),
              ),
            ),
          )
          as _i8.Future<_i2.ApiResponse<_i9.User>>);

  @override
  _i8.Future<_i2.ApiResponse<String>> logout() =>
      (super.noSuchMethod(
            Invocation.method(#logout, []),
            returnValue: _i8.Future<_i2.ApiResponse<String>>.value(
              _FakeApiResponse_0<String>(this, Invocation.method(#logout, [])),
            ),
          )
          as _i8.Future<_i2.ApiResponse<String>>);

  @override
  _i8.Future<_i2.ApiResponse<String>> forgotPassword(
    _i10.ForgotPasswordRequest? request,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#forgotPassword, [request]),
            returnValue: _i8.Future<_i2.ApiResponse<String>>.value(
              _FakeApiResponse_0<String>(
                this,
                Invocation.method(#forgotPassword, [request]),
              ),
            ),
          )
          as _i8.Future<_i2.ApiResponse<String>>);

  @override
  _i8.Future<_i2.ApiResponse<String>> resetPassword(
    _i10.ResetPasswordRequest? request,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#resetPassword, [request]),
            returnValue: _i8.Future<_i2.ApiResponse<String>>.value(
              _FakeApiResponse_0<String>(
                this,
                Invocation.method(#resetPassword, [request]),
              ),
            ),
          )
          as _i8.Future<_i2.ApiResponse<String>>);

  @override
  _i8.Future<_i2.ApiResponse<String>> changePassword(
    _i10.ChangePasswordRequest? request,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#changePassword, [request]),
            returnValue: _i8.Future<_i2.ApiResponse<String>>.value(
              _FakeApiResponse_0<String>(
                this,
                Invocation.method(#changePassword, [request]),
              ),
            ),
          )
          as _i8.Future<_i2.ApiResponse<String>>);

  @override
  _i8.Future<_i2.ApiResponse<String>> verifyEmail(
    _i10.VerifyEmailRequest? request,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#verifyEmail, [request]),
            returnValue: _i8.Future<_i2.ApiResponse<String>>.value(
              _FakeApiResponse_0<String>(
                this,
                Invocation.method(#verifyEmail, [request]),
              ),
            ),
          )
          as _i8.Future<_i2.ApiResponse<String>>);

  @override
  _i8.Future<_i2.ApiResponse<String>> resendEmailVerification(String? email) =>
      (super.noSuchMethod(
            Invocation.method(#resendEmailVerification, [email]),
            returnValue: _i8.Future<_i2.ApiResponse<String>>.value(
              _FakeApiResponse_0<String>(
                this,
                Invocation.method(#resendEmailVerification, [email]),
              ),
            ),
          )
          as _i8.Future<_i2.ApiResponse<String>>);

  @override
  _i8.Future<_i2.ApiResponse<_i11.TwoFactorSetupResponse>> setup2FA() =>
      (super.noSuchMethod(
            Invocation.method(#setup2FA, []),
            returnValue:
                _i8.Future<_i2.ApiResponse<_i11.TwoFactorSetupResponse>>.value(
                  _FakeApiResponse_0<_i11.TwoFactorSetupResponse>(
                    this,
                    Invocation.method(#setup2FA, []),
                  ),
                ),
          )
          as _i8.Future<_i2.ApiResponse<_i11.TwoFactorSetupResponse>>);

  @override
  _i8.Future<_i2.ApiResponse<String>> enable2FA(String? code) =>
      (super.noSuchMethod(
            Invocation.method(#enable2FA, [code]),
            returnValue: _i8.Future<_i2.ApiResponse<String>>.value(
              _FakeApiResponse_0<String>(
                this,
                Invocation.method(#enable2FA, [code]),
              ),
            ),
          )
          as _i8.Future<_i2.ApiResponse<String>>);

  @override
  _i8.Future<_i2.ApiResponse<_i9.User>> verify2FA(
    _i10.VerifyTwoFactorRequest? request,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#verify2FA, [request]),
            returnValue: _i8.Future<_i2.ApiResponse<_i9.User>>.value(
              _FakeApiResponse_0<_i9.User>(
                this,
                Invocation.method(#verify2FA, [request]),
              ),
            ),
          )
          as _i8.Future<_i2.ApiResponse<_i9.User>>);

  @override
  _i8.Future<_i2.ApiResponse<String>> disable2FA(String? password) =>
      (super.noSuchMethod(
            Invocation.method(#disable2FA, [password]),
            returnValue: _i8.Future<_i2.ApiResponse<String>>.value(
              _FakeApiResponse_0<String>(
                this,
                Invocation.method(#disable2FA, [password]),
              ),
            ),
          )
          as _i8.Future<_i2.ApiResponse<String>>);

  @override
  _i8.Future<_i2.ApiResponse<_i9.User>> oauthLogin(
    _i10.OAuthLoginRequest? request,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#oauthLogin, [request]),
            returnValue: _i8.Future<_i2.ApiResponse<_i9.User>>.value(
              _FakeApiResponse_0<_i9.User>(
                this,
                Invocation.method(#oauthLogin, [request]),
              ),
            ),
          )
          as _i8.Future<_i2.ApiResponse<_i9.User>>);

  @override
  _i8.Future<_i2.ApiResponse<String>> requestMagicLink(
    _i10.MagicLinkRequest? request,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#requestMagicLink, [request]),
            returnValue: _i8.Future<_i2.ApiResponse<String>>.value(
              _FakeApiResponse_0<String>(
                this,
                Invocation.method(#requestMagicLink, [request]),
              ),
            ),
          )
          as _i8.Future<_i2.ApiResponse<String>>);

  @override
  _i8.Future<_i2.ApiResponse<_i9.User>> verifyMagicLink(String? token) =>
      (super.noSuchMethod(
            Invocation.method(#verifyMagicLink, [token]),
            returnValue: _i8.Future<_i2.ApiResponse<_i9.User>>.value(
              _FakeApiResponse_0<_i9.User>(
                this,
                Invocation.method(#verifyMagicLink, [token]),
              ),
            ),
          )
          as _i8.Future<_i2.ApiResponse<_i9.User>>);

  @override
  _i8.Future<bool> isAuthenticated() =>
      (super.noSuchMethod(
            Invocation.method(#isAuthenticated, []),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<_i2.ApiResponse<bool>> registerPasskey({
    required String? credentialId,
    required String? publicKey,
    required String? userId,
    required String? deviceName,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#registerPasskey, [], {
              #credentialId: credentialId,
              #publicKey: publicKey,
              #userId: userId,
              #deviceName: deviceName,
            }),
            returnValue: _i8.Future<_i2.ApiResponse<bool>>.value(
              _FakeApiResponse_0<bool>(
                this,
                Invocation.method(#registerPasskey, [], {
                  #credentialId: credentialId,
                  #publicKey: publicKey,
                  #userId: userId,
                  #deviceName: deviceName,
                }),
              ),
            ),
          )
          as _i8.Future<_i2.ApiResponse<bool>>);

  @override
  _i8.Future<_i2.ApiResponse<_i9.User>> authenticateWithPasskey({
    required String? credentialId,
    required String? signature,
    required String? clientData,
    String? userEmail,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#authenticateWithPasskey, [], {
              #credentialId: credentialId,
              #signature: signature,
              #clientData: clientData,
              #userEmail: userEmail,
            }),
            returnValue: _i8.Future<_i2.ApiResponse<_i9.User>>.value(
              _FakeApiResponse_0<_i9.User>(
                this,
                Invocation.method(#authenticateWithPasskey, [], {
                  #credentialId: credentialId,
                  #signature: signature,
                  #clientData: clientData,
                  #userEmail: userEmail,
                }),
              ),
            ),
          )
          as _i8.Future<_i2.ApiResponse<_i9.User>>);

  @override
  _i8.Future<_i2.ApiResponse<bool>> removePasskey(String? credentialId) =>
      (super.noSuchMethod(
            Invocation.method(#removePasskey, [credentialId]),
            returnValue: _i8.Future<_i2.ApiResponse<bool>>.value(
              _FakeApiResponse_0<bool>(
                this,
                Invocation.method(#removePasskey, [credentialId]),
              ),
            ),
          )
          as _i8.Future<_i2.ApiResponse<bool>>);
}

/// A class which mocks [OAuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockOAuthService extends _i1.Mock implements _i12.OAuthService {
  MockOAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i2.ApiResponse<_i12.GoogleSignInResult>> signInWithGoogle() =>
      (super.noSuchMethod(
            Invocation.method(#signInWithGoogle, []),
            returnValue:
                _i8.Future<_i2.ApiResponse<_i12.GoogleSignInResult>>.value(
                  _FakeApiResponse_0<_i12.GoogleSignInResult>(
                    this,
                    Invocation.method(#signInWithGoogle, []),
                  ),
                ),
          )
          as _i8.Future<_i2.ApiResponse<_i12.GoogleSignInResult>>);

  @override
  _i8.Future<void> signOutFromGoogle() =>
      (super.noSuchMethod(
            Invocation.method(#signOutFromGoogle, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<bool> isGoogleSignedIn() =>
      (super.noSuchMethod(
            Invocation.method(#isGoogleSignedIn, []),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<String?> getGoogleAuthToken(_i12.GoogleSignInAccount? account) =>
      (super.noSuchMethod(
            Invocation.method(#getGoogleAuthToken, [account]),
            returnValue: _i8.Future<String?>.value(),
          )
          as _i8.Future<String?>);
}

/// A class which mocks [SecureStorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSecureStorageService extends _i1.Mock
    implements _i13.SecureStorageService {
  MockSecureStorageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> storeAccessToken(String? token) =>
      (super.noSuchMethod(
            Invocation.method(#storeAccessToken, [token]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<String?> getAccessToken() =>
      (super.noSuchMethod(
            Invocation.method(#getAccessToken, []),
            returnValue: _i8.Future<String?>.value(),
          )
          as _i8.Future<String?>);

  @override
  _i8.Future<String?> getToken() =>
      (super.noSuchMethod(
            Invocation.method(#getToken, []),
            returnValue: _i8.Future<String?>.value(),
          )
          as _i8.Future<String?>);

  @override
  _i8.Future<void> removeAccessToken() =>
      (super.noSuchMethod(
            Invocation.method(#removeAccessToken, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> storeRefreshToken(String? token) =>
      (super.noSuchMethod(
            Invocation.method(#storeRefreshToken, [token]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<String?> getRefreshToken() =>
      (super.noSuchMethod(
            Invocation.method(#getRefreshToken, []),
            returnValue: _i8.Future<String?>.value(),
          )
          as _i8.Future<String?>);

  @override
  _i8.Future<void> removeRefreshToken() =>
      (super.noSuchMethod(
            Invocation.method(#removeRefreshToken, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> deleteRefreshToken() =>
      (super.noSuchMethod(
            Invocation.method(#deleteRefreshToken, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> storeUserData(Map<String, dynamic>? userData) =>
      (super.noSuchMethod(
            Invocation.method(#storeUserData, [userData]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<Map<String, dynamic>?> getUserData() =>
      (super.noSuchMethod(
            Invocation.method(#getUserData, []),
            returnValue: _i8.Future<Map<String, dynamic>?>.value(),
          )
          as _i8.Future<Map<String, dynamic>?>);

  @override
  _i8.Future<void> removeUserData() =>
      (super.noSuchMethod(
            Invocation.method(#removeUserData, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> setBiometricEnabled(bool? enabled) =>
      (super.noSuchMethod(
            Invocation.method(#setBiometricEnabled, [enabled]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<bool> getBiometricEnabled() =>
      (super.noSuchMethod(
            Invocation.method(#getBiometricEnabled, []),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<void> storeBiometricEnabled(bool? enabled) =>
      (super.noSuchMethod(
            Invocation.method(#storeBiometricEnabled, [enabled]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<bool> isBiometricEnabled() =>
      (super.noSuchMethod(
            Invocation.method(#isBiometricEnabled, []),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<void> storeDeviceId(String? deviceId) =>
      (super.noSuchMethod(
            Invocation.method(#storeDeviceId, [deviceId]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<String?> getDeviceId() =>
      (super.noSuchMethod(
            Invocation.method(#getDeviceId, []),
            returnValue: _i8.Future<String?>.value(),
          )
          as _i8.Future<String?>);

  @override
  _i8.Future<void> storeFcmToken(String? token) =>
      (super.noSuchMethod(
            Invocation.method(#storeFcmToken, [token]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<String?> getFcmToken() =>
      (super.noSuchMethod(
            Invocation.method(#getFcmToken, []),
            returnValue: _i8.Future<String?>.value(),
          )
          as _i8.Future<String?>);

  @override
  _i8.Future<void> storeLastLogin(DateTime? timestamp) =>
      (super.noSuchMethod(
            Invocation.method(#storeLastLogin, [timestamp]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<DateTime?> getLastLogin() =>
      (super.noSuchMethod(
            Invocation.method(#getLastLogin, []),
            returnValue: _i8.Future<DateTime?>.value(),
          )
          as _i8.Future<DateTime?>);

  @override
  _i8.Future<void> storeTwoFactorSecret(String? secret) =>
      (super.noSuchMethod(
            Invocation.method(#storeTwoFactorSecret, [secret]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<String?> getTwoFactorSecret() =>
      (super.noSuchMethod(
            Invocation.method(#getTwoFactorSecret, []),
            returnValue: _i8.Future<String?>.value(),
          )
          as _i8.Future<String?>);

  @override
  _i8.Future<void> removeTwoFactorSecret() =>
      (super.noSuchMethod(
            Invocation.method(#removeTwoFactorSecret, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> store(String? key, String? value) =>
      (super.noSuchMethod(
            Invocation.method(#store, [key, value]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<String?> get(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#get, [key]),
            returnValue: _i8.Future<String?>.value(),
          )
          as _i8.Future<String?>);

  @override
  _i8.Future<void> remove(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#remove, [key]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> write({required String? key, required String? value}) =>
      (super.noSuchMethod(
            Invocation.method(#write, [], {#key: key, #value: value}),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<String?> read({required String? key}) =>
      (super.noSuchMethod(
            Invocation.method(#read, [], {#key: key}),
            returnValue: _i8.Future<String?>.value(),
          )
          as _i8.Future<String?>);

  @override
  _i8.Future<void> delete({required String? key}) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [], {#key: key}),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> clearAll() =>
      (super.noSuchMethod(
            Invocation.method(#clearAll, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<bool> isKeyRotationNeeded() =>
      (super.noSuchMethod(
            Invocation.method(#isKeyRotationNeeded, []),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<void> rotateEncryptionKeys() =>
      (super.noSuchMethod(
            Invocation.method(#rotateEncryptionKeys, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<bool> containsKey(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#containsKey, [key]),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<Map<String, String>> getAllItems() =>
      (super.noSuchMethod(
            Invocation.method(#getAllItems, []),
            returnValue: _i8.Future<Map<String, String>>.value(
              <String, String>{},
            ),
          )
          as _i8.Future<Map<String, String>>);

  @override
  _i8.Future<void> storeJsonData(String? key, Map<String, dynamic>? data) =>
      (super.noSuchMethod(
            Invocation.method(#storeJsonData, [key, data]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<Map<String, dynamic>?> getJsonData(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#getJsonData, [key]),
            returnValue: _i8.Future<Map<String, dynamic>?>.value(),
          )
          as _i8.Future<Map<String, dynamic>?>);

  @override
  _i8.Future<void> saveUserProfile(dynamic profile) =>
      (super.noSuchMethod(
            Invocation.method(#saveUserProfile, [profile]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<dynamic> getUserProfile() =>
      (super.noSuchMethod(
            Invocation.method(#getUserProfile, []),
            returnValue: _i8.Future<dynamic>.value(),
          )
          as _i8.Future<dynamic>);
}

/// A class which mocks [AccountLockoutService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAccountLockoutService extends _i1.Mock
    implements _i3.AccountLockoutService {
  MockAccountLockoutService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<bool> isAccountLocked() =>
      (super.noSuchMethod(
            Invocation.method(#isAccountLocked, []),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<int> getRemainingLockoutMinutes() =>
      (super.noSuchMethod(
            Invocation.method(#getRemainingLockoutMinutes, []),
            returnValue: _i8.Future<int>.value(0),
          )
          as _i8.Future<int>);

  @override
  _i8.Future<_i3.AccountLockoutStatus> recordFailedAttempt(String? email) =>
      (super.noSuchMethod(
            Invocation.method(#recordFailedAttempt, [email]),
            returnValue: _i8.Future<_i3.AccountLockoutStatus>.value(
              _FakeAccountLockoutStatus_1(
                this,
                Invocation.method(#recordFailedAttempt, [email]),
              ),
            ),
          )
          as _i8.Future<_i3.AccountLockoutStatus>);

  @override
  _i8.Future<void> clearFailedAttempts(String? email) =>
      (super.noSuchMethod(
            Invocation.method(#clearFailedAttempts, [email]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> clearLockout() =>
      (super.noSuchMethod(
            Invocation.method(#clearLockout, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<int> getFailedAttempts(String? email) =>
      (super.noSuchMethod(
            Invocation.method(#getFailedAttempts, [email]),
            returnValue: _i8.Future<int>.value(0),
          )
          as _i8.Future<int>);
}

/// A class which mocks [DeviceFingerprintService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeviceFingerprintService extends _i1.Mock
    implements _i4.DeviceFingerprintService {
  MockDeviceFingerprintService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i4.DeviceFingerprint> generateFingerprint() =>
      (super.noSuchMethod(
            Invocation.method(#generateFingerprint, []),
            returnValue: _i8.Future<_i4.DeviceFingerprint>.value(
              _FakeDeviceFingerprint_2(
                this,
                Invocation.method(#generateFingerprint, []),
              ),
            ),
          )
          as _i8.Future<_i4.DeviceFingerprint>);

  @override
  _i8.Future<String?> getStoredFingerprint() =>
      (super.noSuchMethod(
            Invocation.method(#getStoredFingerprint, []),
            returnValue: _i8.Future<String?>.value(),
          )
          as _i8.Future<String?>);

  @override
  _i8.Future<bool> verifyDevice() =>
      (super.noSuchMethod(
            Invocation.method(#verifyDevice, []),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<bool> isDeviceTrusted(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#isDeviceTrusted, [userId]),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<_i2.ApiResponse<bool>> trustDevice({
    required String? userId,
    String? customName,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#trustDevice, [], {
              #userId: userId,
              #customName: customName,
            }),
            returnValue: _i8.Future<_i2.ApiResponse<bool>>.value(
              _FakeApiResponse_0<bool>(
                this,
                Invocation.method(#trustDevice, [], {
                  #userId: userId,
                  #customName: customName,
                }),
              ),
            ),
          )
          as _i8.Future<_i2.ApiResponse<bool>>);

  @override
  _i8.Future<_i2.ApiResponse<bool>> removeTrustedDevice({
    required String? userId,
    required String? fingerprintId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#removeTrustedDevice, [], {
              #userId: userId,
              #fingerprintId: fingerprintId,
            }),
            returnValue: _i8.Future<_i2.ApiResponse<bool>>.value(
              _FakeApiResponse_0<bool>(
                this,
                Invocation.method(#removeTrustedDevice, [], {
                  #userId: userId,
                  #fingerprintId: fingerprintId,
                }),
              ),
            ),
          )
          as _i8.Future<_i2.ApiResponse<bool>>);

  @override
  _i8.Future<List<_i4.TrustedDevice>> getTrustedDevices(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getTrustedDevices, [userId]),
            returnValue: _i8.Future<List<_i4.TrustedDevice>>.value(
              <_i4.TrustedDevice>[],
            ),
          )
          as _i8.Future<List<_i4.TrustedDevice>>);

  @override
  _i8.Future<void> clearTrustedDevices(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#clearTrustedDevices, [userId]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> recordDeviceVerification() =>
      (super.noSuchMethod(
            Invocation.method(#recordDeviceVerification, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<String?> getDeviceCustomName() =>
      (super.noSuchMethod(
            Invocation.method(#getDeviceCustomName, []),
            returnValue: _i8.Future<String?>.value(),
          )
          as _i8.Future<String?>);

  @override
  _i8.Future<bool> needsDeviceVerification() =>
      (super.noSuchMethod(
            Invocation.method(#needsDeviceVerification, []),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);
}

/// A class which mocks [SessionTimeoutManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockSessionTimeoutManager extends _i1.Mock
    implements _i14.SessionTimeoutManager {
  MockSessionTimeoutManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void initializeSession({
    _i15.VoidCallback? onTimeout,
    _i15.VoidCallback? onWarning,
  }) => super.noSuchMethod(
    Invocation.method(#initializeSession, [], {
      #onTimeout: onTimeout,
      #onWarning: onWarning,
    }),
    returnValueForMissingStub: null,
  );

  @override
  void updateActivity() => super.noSuchMethod(
    Invocation.method(#updateActivity, []),
    returnValueForMissingStub: null,
  );

  @override
  _i8.Future<bool> isSessionValid() =>
      (super.noSuchMethod(
            Invocation.method(#isSessionValid, []),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<int> getRemainingSessionTime() =>
      (super.noSuchMethod(
            Invocation.method(#getRemainingSessionTime, []),
            returnValue: _i8.Future<int>.value(0),
          )
          as _i8.Future<int>);

  @override
  void extendSession() => super.noSuchMethod(
    Invocation.method(#extendSession, []),
    returnValueForMissingStub: null,
  );

  @override
  _i8.Future<Duration> getSessionDuration() =>
      (super.noSuchMethod(
            Invocation.method(#getSessionDuration, []),
            returnValue: _i8.Future<Duration>.value(
              _FakeDuration_3(this, Invocation.method(#getSessionDuration, [])),
            ),
          )
          as _i8.Future<Duration>);

  @override
  _i8.Future<void> clearSession() =>
      (super.noSuchMethod(
            Invocation.method(#clearSession, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [RememberDeviceService].
///
/// See the documentation for Mockito's code generation for more information.
class MockRememberDeviceService extends _i1.Mock
    implements _i5.RememberDeviceService {
  MockRememberDeviceService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i5.RememberedDeviceStatus> isDeviceRemembered(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#isDeviceRemembered, [userId]),
            returnValue: _i8.Future<_i5.RememberedDeviceStatus>.value(
              _FakeRememberedDeviceStatus_4(
                this,
                Invocation.method(#isDeviceRemembered, [userId]),
              ),
            ),
          )
          as _i8.Future<_i5.RememberedDeviceStatus>);

  @override
  _i8.Future<bool> rememberDevice({
    required String? userId,
    int? durationDays,
    bool? skipBiometric = false,
    bool? skipMFA = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#rememberDevice, [], {
              #userId: userId,
              #durationDays: durationDays,
              #skipBiometric: skipBiometric,
              #skipMFA: skipMFA,
            }),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<void> forgetDevice(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#forgetDevice, [userId]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<bool> extendRememberDuration({
    required String? userId,
    int? additionalDays = 30,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#extendRememberDuration, [], {
              #userId: userId,
              #additionalDays: additionalDays,
            }),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<bool> shouldSkipBiometric(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#shouldSkipBiometric, [userId]),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<bool> shouldSkipMFA(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#shouldSkipMFA, [userId]),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<DateTime?> getLastRememberedLogin(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getLastRememberedLogin, [userId]),
            returnValue: _i8.Future<DateTime?>.value(),
          )
          as _i8.Future<DateTime?>);

  @override
  _i8.Future<void> clearAllRememberedDevices(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#clearAllRememberedDevices, [userId]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<_i5.RememberPreferences> getRememberPreferences(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getRememberPreferences, [userId]),
            returnValue: _i8.Future<_i5.RememberPreferences>.value(
              _FakeRememberPreferences_5(
                this,
                Invocation.method(#getRememberPreferences, [userId]),
              ),
            ),
          )
          as _i8.Future<_i5.RememberPreferences>);

  @override
  _i8.Future<bool> updateRememberPreferences({
    required String? userId,
    required _i5.RememberPreferences? preferences,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updateRememberPreferences, [], {
              #userId: userId,
              #preferences: preferences,
            }),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);
}

/// A class which mocks [RateLimiter].
///
/// See the documentation for Mockito's code generation for more information.
class MockRateLimiter extends _i1.Mock implements _i6.RateLimiter {
  MockRateLimiter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i6.RateLimitResult> checkLimit({
    required String? endpoint,
    String? clientId,
    Map<String, dynamic>? metadata,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#checkLimit, [], {
              #endpoint: endpoint,
              #clientId: clientId,
              #metadata: metadata,
            }),
            returnValue: _i8.Future<_i6.RateLimitResult>.value(
              _FakeRateLimitResult_6(
                this,
                Invocation.method(#checkLimit, [], {
                  #endpoint: endpoint,
                  #clientId: clientId,
                  #metadata: metadata,
                }),
              ),
            ),
          )
          as _i8.Future<_i6.RateLimitResult>);

  @override
  void recordSuccess({
    required String? endpoint,
    String? clientId,
    Map<String, dynamic>? metadata,
  }) => super.noSuchMethod(
    Invocation.method(#recordSuccess, [], {
      #endpoint: endpoint,
      #clientId: clientId,
      #metadata: metadata,
    }),
    returnValueForMissingStub: null,
  );

  @override
  _i6.RateLimitStatus getStatus({
    required String? endpoint,
    String? clientId,
    Map<String, dynamic>? metadata,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getStatus, [], {
              #endpoint: endpoint,
              #clientId: clientId,
              #metadata: metadata,
            }),
            returnValue: _FakeRateLimitStatus_7(
              this,
              Invocation.method(#getStatus, [], {
                #endpoint: endpoint,
                #clientId: clientId,
                #metadata: metadata,
              }),
            ),
          )
          as _i6.RateLimitStatus);

  @override
  void reset({
    required String? endpoint,
    String? clientId,
    Map<String, dynamic>? metadata,
  }) => super.noSuchMethod(
    Invocation.method(#reset, [], {
      #endpoint: endpoint,
      #clientId: clientId,
      #metadata: metadata,
    }),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
