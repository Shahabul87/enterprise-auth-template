version: '3.8'

services:
  # Test Database - Separate from development
  postgres-test:
    image: postgres:15-alpine
    container_name: auth_postgres_test
    environment:
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_DB: enterprise_auth_test
    ports:
      - "5433:5432"
    tmpfs:
      - /var/lib/postgresql/data  # Use memory for faster tests
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - auth_test_network

  # Test Redis - Separate instance
  redis-test:
    image: redis:7-alpine
    container_name: auth_redis_test
    command: redis-server --save ""  # Disable persistence for tests
    ports:
      - "6380:6379"
    tmpfs:
      - /data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - auth_test_network

  # Backend for Testing
  backend-test:
    build:
      context: ../../backend
      dockerfile: Dockerfile
      target: testing
    container_name: auth_backend_test
    environment:
      # Test Database
      DATABASE_URL: postgresql://test_user:test_password@postgres-test:5432/enterprise_auth_test
      POSTGRES_HOST: postgres-test
      POSTGRES_PORT: 5432
      POSTGRES_DB: enterprise_auth_test
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      
      # Test Redis
      REDIS_URL: redis://redis-test:6379/0
      REDIS_HOST: redis-test
      REDIS_PORT: 6379
      REDIS_DB: 0
      
      # Test Environment
      ENVIRONMENT: testing
      TESTING: "true"
      DEBUG: "false"
      
      # Faster token expiry for testing
      JWT_ACCESS_TOKEN_EXPIRE_MINUTES: 1
      JWT_REFRESH_TOKEN_EXPIRE_DAYS: 1
      JWT_SECRET_KEY: test-secret-key
      
      # Disable rate limiting for tests
      RATE_LIMIT_ENABLED: "false"
      
      # Test Email (in-memory)
      SMTP_HOST: mailhog
      SMTP_PORT: 1025
      
    volumes:
      - ../../backend:/app
      - /app/.venv
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Setting up test database...' &&
        alembic upgrade head &&
        echo 'Running tests...' &&
        pytest -v --cov=app --cov-report=html --cov-report=term-missing
      "
    networks:
      - auth_test_network

  # Selenium for E2E Testing
  selenium:
    image: selenium/standalone-chrome:latest
    container_name: auth_selenium
    ports:
      - "4444:4444"
      - "7900:7900"  # noVNC web interface
    shm_size: 2gb
    environment:
      SE_NODE_MAX_SESSIONS: 5
      SE_NODE_SESSION_TIMEOUT: 300
    networks:
      - auth_test_network

  # Load Testing with Locust
  locust:
    image: locustio/locust
    container_name: auth_locust
    ports:
      - "8089:8089"
    volumes:
      - ../scripts/locust:/mnt/locust
    command: -f /mnt/locust/locustfile.py --host http://backend-test:8000
    depends_on:
      - backend-test
    networks:
      - auth_test_network

networks:
  auth_test_network:
    driver: bridge