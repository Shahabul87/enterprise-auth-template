// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_auth_template/test/compliance/cookie_consent_banner_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flutter_auth_template/core/compliance/consent_manager.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ConsentManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockConsentManager extends _i1.Mock implements _i2.ConsentManager {
  MockConsentManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get hasGivenConsent =>
      (super.noSuchMethod(
            Invocation.getter(#hasGivenConsent),
            returnValue: false,
          )
          as bool);

  @override
  _i3.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  bool isConsentGranted(_i2.ConsentType? type) =>
      (super.noSuchMethod(
            Invocation.method(#isConsentGranted, [type]),
            returnValue: false,
          )
          as bool);

  @override
  _i3.Future<void> updateConsent({
    required Map<_i2.ConsentType, bool>? consents,
    String? userId,
    _i2.ConsentMethod? method = _i2.ConsentMethod.explicit,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updateConsent, [], {
              #consents: consents,
              #userId: userId,
              #method: method,
            }),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> withdrawAllConsents({String? userId}) =>
      (super.noSuchMethod(
            Invocation.method(#withdrawAllConsents, [], {#userId: userId}),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  List<_i2.ConsentRecord> getConsentHistory({String? userId}) =>
      (super.noSuchMethod(
            Invocation.method(#getConsentHistory, [], {#userId: userId}),
            returnValue: <_i2.ConsentRecord>[],
          )
          as List<_i2.ConsentRecord>);

  @override
  Map<String, dynamic> exportConsentData() =>
      (super.noSuchMethod(
            Invocation.method(#exportConsentData, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  _i3.Future<void> clearAllConsentData() =>
      (super.noSuchMethod(
            Invocation.method(#clearAllConsentData, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  bool needsReconsent(_i2.ConsentVersion? requiredVersion) =>
      (super.noSuchMethod(
            Invocation.method(#needsReconsent, [requiredVersion]),
            returnValue: false,
          )
          as bool);
}
