# Production-optimized multi-stage Dockerfile for Next.js Frontend
# Follows security best practices and optimizes for minimal image size

# =============================================================================
# Base stage - Common Node.js setup with security hardening
# =============================================================================
FROM node:18-alpine AS base

# Install security updates and dependencies
RUN apk update && \
    apk add --no-cache \
        libc6-compat \
        dumb-init \
        curl \
    && apk upgrade \
    && rm -rf /var/cache/apk/* \
    && rm -rf /tmp/*

# Set up security-focused user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs --ingroup nodejs

# Set secure environment variables
ENV NEXT_TELEMETRY_DISABLED=1 \
    NODE_ENV=production \
    NPM_CONFIG_UPDATE_NOTIFIER=false \
    NPM_CONFIG_FUND=false

WORKDIR /app

# =============================================================================
# Dependencies stage - Install and cache dependencies
# =============================================================================
FROM base AS deps

# Copy package files
COPY package.json package-lock.json* yarn.lock* pnpm-lock.yaml* ./

# Install dependencies based on preferred package manager
RUN \
    if [ -f yarn.lock ]; then \
        yarn --frozen-lockfile --production=false; \
    elif [ -f package-lock.json ]; then \
        npm ci --include=dev --no-audit --no-fund; \
    elif [ -f pnpm-lock.yaml ]; then \
        npm install -g pnpm && pnpm i --frozen-lockfile; \
    else \
        echo "Lockfile not found." && exit 1; \
    fi

# Clean npm cache
RUN npm cache clean --force

# =============================================================================
# Builder stage - Build the application with optimizations
# =============================================================================
FROM base AS builder

WORKDIR /app

# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules

# Copy source code
COPY . .

# Copy build-time environment variables
ARG NEXT_PUBLIC_API_URL
ARG NEXT_PUBLIC_APP_NAME
ARG NEXT_PUBLIC_ENVIRONMENT
ARG NEXT_PUBLIC_SENTRY_DSN
ARG NEXT_PUBLIC_GOOGLE_ANALYTICS_ID

# Set build environment variables
ENV NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL} \
    NEXT_PUBLIC_APP_NAME=${NEXT_PUBLIC_APP_NAME} \
    NEXT_PUBLIC_ENVIRONMENT=${NEXT_PUBLIC_ENVIRONMENT} \
    NEXT_PUBLIC_SENTRY_DSN=${NEXT_PUBLIC_SENTRY_DSN} \
    NEXT_PUBLIC_GOOGLE_ANALYTICS_ID=${NEXT_PUBLIC_GOOGLE_ANALYTICS_ID} \
    NEXT_TELEMETRY_DISABLED=1 \
    NODE_ENV=production

# Build application with optimizations
RUN npm run build && \
    npm prune --production && \
    npm cache clean --force

# Remove development dependencies and clean up
RUN rm -rf ./.next/cache && \
    rm -rf ./node_modules/.cache && \
    find ./node_modules -name "*.md" -delete && \
    find ./node_modules -name "*.map" -delete

# =============================================================================
# Production stage - Minimal runtime image
# =============================================================================
FROM base AS production

WORKDIR /app

# Set production environment
ENV NODE_ENV=production \
    NEXT_TELEMETRY_DISABLED=1 \
    PORT=3000 \
    HOSTNAME="0.0.0.0"

# Create app directories with proper permissions
RUN mkdir -p .next/cache && \
    chown -R nextjs:nodejs /app

# Copy public assets
COPY --from=builder --chown=nextjs:nodejs /app/public ./public

# Copy built application (standalone output for smaller size)
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Copy additional runtime files if they exist
COPY --from=builder --chown=nextjs:nodejs /app/next.config.js* ./
COPY --from=builder --chown=nextjs:nodejs /app/package.json ./

# Switch to non-root user for security
USER nextjs

# Expose port
EXPOSE 3000

# Health check with timeout and retries
HEALTHCHECK --interval=30s \
            --timeout=10s \
            --start-period=5s \
            --retries=3 \
    CMD curl -f http://localhost:3000/api/health || exit 1

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "server.js"]

# =============================================================================
# Alternative production stage for environments without standalone output
# =============================================================================
FROM base AS production-full

WORKDIR /app

# Set production environment
ENV NODE_ENV=production \
    NEXT_TELEMETRY_DISABLED=1 \
    PORT=3000 \
    HOSTNAME="0.0.0.0"

# Copy production dependencies
COPY --from=deps --chown=nextjs:nodejs /app/node_modules ./node_modules

# Copy built application
COPY --from=builder --chown=nextjs:nodejs /app/.next ./.next
COPY --from=builder --chown=nextjs:nodejs /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/package.json ./package.json
COPY --from=builder --chown=nextjs:nodejs /app/next.config.js* ./

# Create cache directory
RUN mkdir -p .next/cache && \
    chown -R nextjs:nodejs /app

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s \
            --timeout=10s \
            --start-period=5s \
            --retries=3 \
    CMD curl -f http://localhost:3000/api/health || exit 1

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

# Start with Next.js production server
CMD ["npm", "start"]

# =============================================================================
# Security scanning stage for CI/CD pipelines
# =============================================================================
FROM production AS security-scan

# Switch back to root for security scanning tools
USER root

# Install security scanning tools
RUN apk add --no-cache \
        git \
        python3 \
        py3-pip \
    && pip3 install --no-cache-dir \
        safety \
        bandit

# Copy source for security scanning
COPY --from=builder /app/package*.json ./
COPY --from=builder /app/src ./src/

# Run security scans (these will be executed in CI/CD)
RUN npm audit --audit-level=moderate --production || true && \
    safety check --file package.json || true

# Switch back to nextjs user
USER nextjs

# =============================================================================
# Testing stage - For running tests in production-like environment
# =============================================================================
FROM production-full AS testing

# Switch to root to install test dependencies
USER root

# Install additional testing tools
RUN apk add --no-cache \
        chromium \
        nss \
        freetype \
        freetype-dev \
        harfbuzz \
        ca-certificates \
        ttf-freefont

# Install test dependencies
COPY --from=deps /app/node_modules ./node_modules
RUN npm install --save-dev \
        @testing-library/react \
        @testing-library/jest-dom \
        @testing-library/user-event \
        jest \
        jest-environment-jsdom \
        playwright \
        @playwright/test

# Set up Chromium for tests
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true \
    PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser

# Copy test files
COPY __tests__/ ./__tests__/
COPY jest.config.js* ./
COPY playwright.config.ts* ./

# Switch back to nextjs user
USER nextjs

# Override CMD for testing
CMD ["npm", "run", "test:ci"]

# =============================================================================
# Nginx stage - Serve static files with nginx (for static export)
# =============================================================================
FROM nginx:1.24-alpine AS nginx-static

# Install security updates
RUN apk update && \
    apk upgrade && \
    rm -rf /var/cache/apk/*

# Copy built static files from builder stage
COPY --from=builder /app/out /usr/share/nginx/html

# Copy custom nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf
COPY nginx-default.conf /etc/nginx/conf.d/default.conf

# Create non-root user for nginx
RUN adduser -D -s /bin/sh -u 1001 nginxuser

# Set up proper permissions
RUN chown -R nginxuser:nginxuser /usr/share/nginx/html && \
    chown -R nginxuser:nginxuser /var/cache/nginx && \
    chown -R nginxuser:nginxuser /var/log/nginx && \
    chown -R nginxuser:nginxuser /etc/nginx/conf.d

# Make nginx run as non-root user
RUN touch /var/run/nginx.pid && \
    chown -R nginxuser:nginxuser /var/run/nginx.pid

USER nginxuser

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s \
            --timeout=10s \
            --start-period=5s \
            --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]

# =============================================================================
# Build information and labels
# =============================================================================
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION

LABEL maintainer="Enterprise Auth Template Team" \
      org.label-schema.build-date=$BUILD_DATE \
      org.label-schema.name="enterprise-auth-frontend" \
      org.label-schema.description="Production-optimized Next.js frontend for Enterprise Auth Template" \
      org.label-schema.url="https://github.com/your-org/enterprise-auth-template" \
      org.label-schema.vcs-ref=$VCS_REF \
      org.label-schema.vcs-url="https://github.com/your-org/enterprise-auth-template" \
      org.label-schema.vendor="Your Organization" \
      org.label-schema.version=$VERSION \
      org.label-schema.schema-version="1.0" \
      org.opencontainers.image.title="Enterprise Auth Frontend" \
      org.opencontainers.image.description="Production-optimized Next.js frontend with security hardening" \
      org.opencontainers.image.created=$BUILD_DATE \
      org.opencontainers.image.revision=$VCS_REF \
      org.opencontainers.image.version=$VERSION \
      org.opencontainers.image.source="https://github.com/your-org/enterprise-auth-template"